<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>All Posts - </title>
    <link>https://laurance.eu.org/posts/</link>
    <description>All Posts | </description>
    <generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 23 Mar 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://laurance.eu.org/posts/" rel="self" type="application/rss+xml" /><item>
  <title>InfluxDB - 如何建立使用者密碼及相關權限</title>
  <link>https://laurance.eu.org/posts/influxdb-%E5%BB%BA%E7%AB%8B%E4%BD%BF%E7%94%A8%E8%80%85%E5%AF%86%E7%A2%BC/</link>
  <pubDate>Thu, 23 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/influxdb-%E5%BB%BA%E7%AB%8B%E4%BD%BF%E7%94%A8%E8%80%85%E5%AF%86%E7%A2%BC/</guid>
  <description><![CDATA[InfluxDB 預設是沒有密碼的,使用 influx 進入介面操作即可 [root@laurance ~]# influx Connected to http://localhost:8086 version 1.8.10 InfluxDB shell version: 1.8.10 建立使用者及密碼 CREATE USER telegraf WITH PASSWORD &#39;telegraf&#39; CREATE USER &lt;username&gt; WITH PASSWORD &#39;&lt;password&gt;&#39; 給予讀的權限 GRANT READ ON telegraf TO laurance GRANT [READ,WRITE,ALL] ON &lt;database_name&gt; TO &lt;username&gt; 查看使用者 SHOW USERS 查看權限 SHOW GRANTS FOR laurance 拔除 root 權限 REVOKE ALL PRIVILEGES FROM telegraf 給予 root 權限 GRANT ALL PRIVILEGES TO laurance 重新設置密碼 SET PASSWORD FOR laurance = &#39;influxdb4ever&#39; 刪除使用者 DROP USER laurance 登入 將密碼驗證打開 ps 一定要有 ''ROOT' 才能登入 編輯設定檔 vim /etc/influxdb/influxdb.]]></description>
</item>
<item>
  <title>GCP - ChatGPT 串接 Firebase 及 Linebot</title>
  <link>https://laurance.eu.org/posts/gcp-chatgpt-%E4%B8%B2%E6%8E%A5-firebase%E5%8F%8Alinebot/</link>
  <pubDate>Wed, 22 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/gcp-chatgpt-%E4%B8%B2%E6%8E%A5-firebase%E5%8F%8Alinebot/</guid>
  <description><![CDATA[Note 建立與設定線上即時性資料庫 Firebase Realtime database https://console.firebase.google.com/u/0/ 點選 Go to console 點選 建立專案 輸入 專案名稱及打勾協議 取消勾選與 Google Analytics 建立關聯，可以直接建立專案 建立關聯可以透過 Google Analytics 進行數據分析統計，但如果只是要單純使用資料庫，可以不必建立關聯 Note 建立 Realtime Database 資料庫 專案建立完成後就會進入專案畫面，從左側選擇 建構 &gt; Realtime Database 選擇後，點擊建立資料庫 資料庫的位置選擇美國 繼續下一步 使用鎖定模式啟用 ( 鎖定模式表示這個資料庫禁止存取，啟用後會再修改設定使資料庫可以存取資料 ) Note 建立好的畫面 Note 修改 Realtime Database 存取權限 進入規則頁籤，將規則從 false 修改為 ture 點擊發布，就能將資料庫改成所有人都可以存取的狀態 建立 GCP-Cloud Functions # requirements.txt # Function dependencies, for example: # package&gt;=version line-bot-sdk requests openai git+https://github.com/ozgur/python-firebase # main.py from linebot import LineBotApi, WebhookHandler from linebot.]]></description>
</item>
<item>
  <title>Postgresql - install postgresql-14.7 on centos7</title>
  <link>https://laurance.eu.org/posts/postgresql-%E5%AE%89%E8%A3%9Dpostgresql-14.7-on-centos7/</link>
  <pubDate>Tue, 21 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/postgresql-%E5%AE%89%E8%A3%9Dpostgresql-14.7-on-centos7/</guid>
  <description><![CDATA[自行編譯低版本 PSQL-14.7]]></description>
</item>
<item>
  <title>Postgresql - 常用指令</title>
  <link>https://laurance.eu.org/posts/postgresql-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
  <pubDate>Tue, 21 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/postgresql-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
  <description><![CDATA[PSQL 指令紀錄]]></description>
</item>
<item>
  <title>Windows - win10 專業版金鑰</title>
  <link>https://laurance.eu.org/posts/windows-win10%E5%B0%88%E6%A5%AD%E7%89%88%E9%87%91%E9%91%B0/</link>
  <pubDate>Mon, 20 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/windows-win10%E5%B0%88%E6%A5%AD%E7%89%88%E9%87%91%E9%91%B0/</guid>
  <description><![CDATA[ Windows 10 專業版金鑰啟用方法 2023-03-20 實測有效
{Step 1} 叫出 PSW (使用管理者身分)
WIN + X + A {Step 2} 輸入已下指令
slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX slmgr /skms kms.03k.org slmgr /ato 啟用成功 ]]></description>
</item>
<item>
  <title>Xshell 7 - v7.0.0001 install</title>
  <link>https://laurance.eu.org/posts/xshell-7-v7.0.0001-install/</link>
  <pubDate>Mon, 20 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/xshell-7-v7.0.0001-install/</guid>
  <description><![CDATA[ Xshell 7 - v7.0.0001 install (Cracked version) 安裝載點
將桌面右下角系統時間修改為 2018 年 否則會跳ERROR 點擊安裝檔安裝版本 v7.0.0001 安裝完成後並不能直接開啟,須覆蓋一隻檔案才能開啟 將包裡的 nslicense.dll 覆蓋至預設路徑 C:\Program Files (x86)\NetSarang\Xshell 7 關閉自動檢查更新 工具 &gt; 選項 &gt; 更新
將天數改為最大值並取消勾勾
最後將時間條回來即可 查看金鑰已過的狀態 ]]></description>
</item>
<item>
  <title>Xshell 7 - 匯出及匯入</title>
  <link>https://laurance.eu.org/posts/xshell-7-%E5%8C%AF%E5%87%BA%E5%8F%8A%E5%8C%AF%E5%85%A5/</link>
  <pubDate>Mon, 20 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/xshell-7-%E5%8C%AF%E5%87%BA%E5%8F%8A%E5%8C%AF%E5%85%A5/</guid>
  <description><![CDATA[ Xshell 7-匯出及匯入 將 工作階段 匯出成 xxx.xts 開啟 全新的 Xshell 將 .xts 匯入 ]]></description>
</item>
<item>
  <title>Nginx - 重新編譯 &amp;&amp; 添加 echo 模組</title>
  <link>https://laurance.eu.org/posts/nginx-%E6%B7%BB%E5%8A%A0-echo-%E6%A8%A1%E7%B5%84/</link>
  <pubDate>Mon, 13 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/nginx-%E6%B7%BB%E5%8A%A0-echo-%E6%A8%A1%E7%B5%84/</guid>
  <description><![CDATA[安裝編譯環境
yum -y install pcre pcre-devel openssl openssl-devel gcc gcc-c++ zlib zlib-devel 在 Nginx 安裝包裡 下載 echo模組安裝包 &amp;&amp; 解壓縮
cd /root/installation/nginx-1.21.6/ wget https://github.com/openresty/echo-nginx-module/archive/v0.61.tar.gz tar zxvf v0.61.tar.gz 查看原本的編譯參數
/usr/local/web/nginx/sbin/nginx -V 重新編譯一次 (需進入原本安裝 nginx 的目錄底下編譯)
cd /root/installation/nginx-1.21.6 ./configure --user=nginx --group=nginx --prefix=/usr/local/web/nginx --sbin-path=/usr/local/web/nginx/sbin/nginx --conf-path=/usr/local/web/nginx/conf/nginx.conf --error-log-path=/usr/local/web/nginx/logs/error.log --http-log-path=/usr/local/web/nginx/logs/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_v2_module --with-http_stub_status_module --with-http_sub_module --add-module=/usr/local/incubator-pagespeed-ngx-1.13.35.2-stable/ --add-module=/usr/local/nginx-http-concat/ --with-http_geoip_module --add-module=/root/installation/nginx-1.21.6/echo-nginx-module-0.61 make #不要 make install 會重複安裝 停 nginx 服務]]></description>
</item>
<item>
  <title>HUGO - 添加 Algolia 搜索支持</title>
  <link>https://laurance.eu.org/posts/hugo%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2%E6%94%AF%E6%8C%81/</link>
  <pubDate>Fri, 10 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/hugo%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2%E6%94%AF%E6%8C%81/</guid>
  <description><![CDATA[新增搜索模塊 Algolia 配置在 hugo 上,實現本地搜索 Algolia官方網址
{Step 1} 新建 application 及 index {Step 2} 紀錄 Keys 等等會用到 ( Application ID, Search-Only API Key, Admin API Key ) {Step 3} 修改 config.yaml 主要生成 Algolia 索引 outputFormats: Algolia: baseName: algolia isPlainText: true mediaType: application/json notAlternative: true outputs: home: [&#34;HTML&#34;, &#34;RSS&#34;, &#34;Algolia&#34;] params.algolia: appId: &#34;Application ID&#34; indexName: &#34;Index name&#34; searchOnlyKey: &#34;Admin API Key&#34; {Step 4} 在目錄下 layouts/_default 新建 list.algolia.json 文件 {{/* 生成Algolia搜索索引文件 */}} {{- $.]]></description>
</item>
<item>
  <title>haproxy - 設定檔解析</title>
  <link>https://laurance.eu.org/posts/haproxy-%E8%A8%AD%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
  <pubDate>Thu, 09 Mar 2023 00:00:00 &#43;0000</pubDate>
  <author>Laurance</author>
  <guid>https://laurance.eu.org/posts/haproxy-%E8%A8%AD%E7%BD%AE%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
  <description><![CDATA[global 設定 ( 全域設定 ) global log 127.0.0.1 local5 chroot /usr/local/haproxy pidfile /var/run/haproxy.pid maxconn 5000 user haproxy group haproxy daemon stats socket /etc/haproxy/haproxy.sock mode 600 level admin stats timeout 2m #----------------------------------------------------------------------------------------------- Example log 設定至本機 syslog 預設位置 (級別為 local5 notice)
chroot 設定為 haproxy 主要運行位置
pidfile 設定為 haproxy 進程
maxconn 設定每個 haproxy 進程可以接受的最大併發連接數
daemon 設定為背景執行
default 設定 ( 設定能用來配置套用到 frontend、backend、listen 等配置 ) defaults mode tcp log global option httplog option dontlognull option log-health-checks retries 3 timeout http-request 30s timeout queue 300s timeout connect 600s timeout client 10m timeout server 10m timeout http-keep-alive 30s timeout check 600s maxconn 4000 #----------------------------------------------------------------------------------------------- Example mode 指定了 HAProxy instance 所使用的通訊協定]]></description>
</item>
</channel>
</rss>
